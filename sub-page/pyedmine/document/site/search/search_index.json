{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to PyEdmine\u2019s documentation!</p>"},{"location":"#introduction","title":"Introduction","text":"<p>PyEdmine is a library of algorithms for reproducing Knowledge Tracing, Cognitive Diagnosis, and Exercise Recommendation models.</p>"},{"location":"#implemented","title":"Implemented","text":""},{"location":"#built-in-data-preprocessing","title":"Built-in Data Preprocessing","text":"<ul> <li>Assist2009</li> <li>Assist2009-full</li> <li>Assist2012</li> <li>Assist2015</li> <li>Assist2017</li> <li>Edi2020-task1</li> <li>Edi2020-task34</li> <li>Ednet-kt1</li> <li>Junyi2015</li> <li>Moocradar-C[courseId] (For example, <code>moocradar-C746997</code>)</li> <li>Poj</li> <li>Slepemapy-anatomy</li> <li>SLP-[subject] (For example, <code>SLP-mat</code>)</li> <li>Statics2011</li> <li>Xes3g5m</li> </ul>"},{"location":"#built-in-models","title":"Built-in Models","text":"<p>Dataset used in the example is <code>assist2009</code></p> <p>First, Run <code>examples/knowledge_tracing/mc2sc.py</code> to obtain the Q table based on single-concept format (i.e., the combination of multiple knowledge points is regarded as a new knowledge point) on the assist2009 dataset.</p>"},{"location":"#knowledge-tracing","title":"Knowledge Tracing","text":"<p>root dir: <code>examples/knowledge_tracing</code></p> <ul> <li>ABQR<ul> <li>Run <code>abqr/get_graph.py --dataset_name \"assist2009-single-concept\"</code></li> <li>Run <code>train/abqr.py --dataset_name \"assist2009-single-concept\"</code></li> </ul> </li> <li>AKT<ul> <li>Run <code>train/akt.py</code></li> </ul> </li> <li>ATDKT<ul> <li>Run <code>train/atdkt.py</code></li> </ul> </li> <li>ATKT<ul> <li>Run <code>train/atkt.py</code></li> </ul> </li> <li>CKT<ul> <li>Run <code>train/ckt.py</code></li> </ul> </li> <li>CLKT<ul> <li>Run <code>train/clkt.py --dataset_name \"assist2009-single-concept\"</code></li> </ul> </li> <li>DIMKT<ul> <li>Run <code>dimkt/get_difficulty.py</code></li> <li>Run <code>train/dimkt.py</code></li> </ul> </li> <li>DKT<ul> <li>Run <code>train/dkt.py</code></li> </ul> </li> <li>DKTForget<ul> <li>Run <code>train/dkt_forget.py</code></li> </ul> </li> <li>DKVMN<ul> <li>Run <code>train/dkvmn.py</code></li> </ul> </li> <li>DTransformer<ul> <li>Run <code>train/d_transformer.py --dataset_name \"assist2009-single-concept\"</code></li> </ul> </li> <li>GIKT<ul> <li>Run <code>gikt/get_graph.py</code></li> <li>Run <code>train/gikt.py</code></li> </ul> </li> <li>HawkesKT<ul> <li>Run <code>train/hawkes_kt.py</code></li> </ul> </li> <li>HDLPKT<ul> <li>Run <code>train/hdlpkt.py --dataset_name \"assist2009-single-concept\"</code></li> </ul> </li> <li>LBKT<ul> <li>Run <code>lbkt/get_statics.py</code></li> <li>Run <code>lbkt/get_factor.py</code></li> </ul> </li> <li>LPKT<ul> <li>Run <code>train/lpkt.py</code></li> </ul> </li> <li>MIKT<ul> <li>Run <code>train/mikt.py</code></li> </ul> </li> <li>QDCKT<ul> <li>Run <code>qdckt/get_difficulty.py</code></li> <li>Run <code>train/qdckt.py</code></li> </ul> </li> <li>QIKT<ul> <li>Run <code>train/qikt.py</code></li> </ul> </li> <li>qDKT<ul> <li>Run <code>train/qdkt.py</code></li> </ul> </li> <li>SimpleKT<ul> <li>Run <code>train/simple_kt.py</code></li> </ul> </li> <li>SKVMN<ul> <li>Run <code>train/skvmn.py</code></li> </ul> </li> <li>SparseKT<ul> <li>Run <code>train/sparse_kt.py</code></li> </ul> </li> <li>UKT<ul> <li>Run <code>train/ukt.py</code></li> </ul> </li> <li>qDKT_CORE<ul> <li>Run <code>train/qdkt_core.py</code></li> </ul> </li> <li>AKT_CORE<ul> <li>Run <code>train/akt_core.py</code></li> </ul> </li> <li>ReKT<ul> <li>Run <code>train/rekt.py</code></li> </ul> </li> </ul>"},{"location":"#cognitive-diagnosis","title":"Cognitive Diagnosis","text":"<p>root dir: <code>examples/cognitive_diagnosis</code></p> <ul> <li>DINA<ul> <li>Run <code>train/dina.py</code></li> </ul> </li> <li>HierCDF <ul> <li>Run <code>hier_cdf/construct_graph_from_rcd.py</code></li> <li>Run <code>train/hier_cdf.py</code></li> </ul> </li> <li>HyperCD<ul> <li>Run <code>hyper_cd/construct_hyper_graph.py</code></li> <li>Run <code>train/hyper_cd.py</code></li> </ul> </li> <li>IRT<ul> <li>Run <code>train/irt.py</code></li> </ul> </li> <li>MIRT<ul> <li>Run <code>train/mirt.py</code></li> </ul> </li> <li>NCD<ul> <li>Run <code>train/ncd.py</code></li> </ul> </li> <li>RCD<ul> <li>Run <code>/root/code/pyedmine/rcd/build_k_e_graph.py</code></li> <li>Run <code>/root/code/pyedmine/rcd/build_u_e_graph.py</code></li> <li>Run <code>/root/code/pyedmine/rcd/process_edge.py</code></li> <li>Run <code>train/rcd.py</code></li> </ul> </li> </ul>"},{"location":"#exercise-recommendation","title":"Exercise Recommendation","text":"<p>root dir: <code>examples/exercise_recommendation</code></p> <ul> <li>EB-CF <ul> <li>Get Question Similarity Matrix<ul> <li>Run <code>user_exercise_based_CF/que_sim_matrix.py</code></li> <li>Run <code>user_exercise_based_CF/que_sim_matrix_KT.py</code></li> <li>Run <code>user_exercise_based_CF/que_sim_matrix_CD.py</code></li> </ul> </li> <li>Run <code>user_exercise_based_CF/evaluate_ub_cf.py</code></li> </ul> </li> <li>UB-CF <ul> <li>Get User Similarity Matrix<ul> <li>Run <code>user_exercise_based_CF/user_sim_matrix.py</code></li> <li>Run <code>user_exercise_based_CF/user_sim_matrix_KT.py</code></li> <li>Run <code>user_exercise_based_CF/user_sim_matrix_CD.py</code></li> </ul> </li> <li>Run <code>user_exercise_based_CF/evaluate_eb_cf.py</code></li> </ul> </li> <li>KG4EX<ul> <li>Get DKT_KG4EX model: Run <code>examples/knowledge_tracing/train/dkt_kg4ex.py</code></li> <li>Run <code>kg4ex/get_mlkc.py</code></li> <li>Run <code>kg4ex/get_pkc.py</code></li> <li>Run <code>kg4ex/get_efr.py</code></li> <li>Run <code>kg4ex/get_triples.py</code></li> <li>Run <code>train/kg4ex.py</code></li> </ul> </li> </ul>"},{"location":"#learning-path-recommendation","title":"Learning Path Recommendation","text":"<p>root dir: <code>examples/learning_path_recommendation</code></p> <p>First, you need to train a KT model (PyEdmine currently supports simulators for qDKT and LPKT4LPR), and then set parameter <code>model_dir_name</code> in LPR train code to use the KT simulation environment.</p> <ul> <li>RandomRecQC<ul> <li>Run <code>evaluate/offline_single_goal_evaluate.py --agent_dir_name \"RandomRecQC-20\"</code></li> </ul> </li> <li>AStarRecConcept<ul> <li>Run <code>evaluate/offline_single_goal_evaluate.py --agent_dir_name \"AStarRecConcept-4-5\"</code></li> </ul> </li> <li>D3QN (Double Dueling DQN)<ul> <li>Run <code>train/d3qn.py</code></li> </ul> </li> <li>Reinforce<ul> <li>Run <code>train/reinforce.py</code></li> </ul> </li> <li>A2C<ul> <li>Run <code>train/a2c.py</code></li> </ul> </li> </ul>"},{"location":"doc/","title":"Document","text":""},{"location":"doc/#quick-start","title":"Quick Start","text":"<p>github</p>"},{"location":"doc/#data","title":"Data","text":""},{"location":"doc/#preporcessed-files","title":"Preporcessed Files","text":"<ul> <li><code>data.txt</code> - Data file in a unified format</li> <li><code>Q_table.npy</code> - Ndarray of shape (n_question, n_concept), where each row is a one-hot or multi-hot vector, indicating the correspondence between questions and concepts</li> <li><code>statics_preprocessed.json</code> - Statistics of the dataset</li> <li><code>[question|concept]_id_map.csv</code> - The correspondence between the original question/concept ID and the mapped question/concept ID (mapped to integers, starting from 0), as well as the meta information of the question and concept</li> </ul>"},{"location":"doc/#format-of-datatxt","title":"Format of <code>data.txt</code>","text":"<p>Example of Ednet-kt1 dataset</p> <pre><code>user_id,seq_len;question_seq,correctness_seq,time_seq,use_time_seq\n0\n76\n0,1,2,3,4,5,6,8,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,46,32,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,64,30,48,65\n1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,0,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,0,1,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0\nn20,21,21,27,13,13,13,12,12,12,12,12,12,18,18,18,26,16,6,19,27,29,53,53,53,53,51,51,51,51,20,19,18,17,15,14,16,16,18,16,14,17,18,16,15,18,15,30,20,21,12,16,15,32,29,34,18,19,16,32,18,6,17,14,16,31,20,20,21,18,25,15,19,21,22,23\n1\n77\n70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,33,130,131,132,37,133,134,135,49,136,137,138,63,139,140,141,45\n0,0,0,0,1,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,0,1,1,0,0,0,1,0,0,1,1,0,1,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0\nn29,21,27,10,7,4,16,36,33,33,19,34,42,9,21,24,4,37,160,24,8,5,21,32,16,24,19,9,14,5,19,4,15,10,11,9,5,9,15,11,7,38,15,20,21,9,15,18,15,18,20,10,24,5,20,13,10,12,9,15,20,13,14,19,9,9,14,14,21,10,14,13,21,16,18,17,23\n...\n</code></pre> <p>The first line is separated by a semicolon <code>;</code>. On the left is the user information contained in the dataset, and on the right is the information related to each interaction between the user and the question contained in the dataset.</p>"},{"location":"doc/#feature","title":"Feature","text":""},{"location":"doc/#concept-aggregation","title":"Concept Aggregation","text":"<p>The official code of some models can only run on a single-concept dataset (i.e., one question corresponds to only one concept), such as DKT. We designed an Embedding Layer that can automatically index the corresponding concept ids through the question id and return the aggregated (for example, average pooling) concept embedding corresponding to the question.</p>"},{"location":"doc/#mask-questions-or-concepts","title":"Mask Questions or Concepts","text":"<p>Use <code>Q</code> to represent the number of question in the dataset, and <code>C</code> to represent the number of concepts in the dataset.</p> <ul> <li> <p>Example 1: Use the question of the assist2009 dataset to train DKT.</p> <ol> <li>Create a folder <code>dataset_preprocessed/assist2009-no-concept</code> and save a unit diagonal matrix of size <code>Q*Q</code> in the folder and name it <code>Q_table.npy</code></li> <li>When training DKT, set the parameter <code>dataset_name</code> to <code>assist2009-no-concept</code></li> <li>Our code will automatically read information related to questions and concepts from the Q table</li> </ol> </li> <li> <p>Example 2: Only use the concept of the assist2009 dataset to train AKT.</p> <ol> <li>Create a folder <code>dataset_preprocessed/assist2009-no-question</code> and save a unit diagonal matrix of size <code>C*C</code> in the folder and name it <code>Q_table.npy</code></li> <li>When training AKT, set the parameter <code>dataset_name</code> to <code>assist2009-no-question</code></li> <li>Our code will automatically read information related to questions and concepts from the Q table</li> </ol> </li> <li> <p>Example 3: Run some models that can only process single-concept datasets (such as CLKT, DTransformer, HawkesKT, ABQR and HDLPKT).</p> <ol> <li>Running script <code>examples/knowledge_tracing/mc2sc.py</code> will treat the combination of multiple concepts as a new concept and regenerate the <code>Q_table.npy</code>. For example, for the <code>assist2009</code> dataset, the <code>assist2009-single-concept</code> dataset will be generated.</li> <li>When training model, set the parameter <code>dataset_name</code> to <code>assist2009-single-concept</code></li> </ol> </li> </ul>"},{"location":"doc/#code-optimization","title":"Code Optimization","text":"<p>For GIKT and KG4EX, the inference process in the official code is implemented using loops. To accelerate the inference, this algorithm library rewrites the loop-based code into matrix operations, achieving a 10\u2013100x speedup. Additionally, the official code of GIKT consumes a significant amount of GPU memory, which has also been optimized accordingly.</p>"}]}